// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/actor": {
            "get": {
                "description": "Возвращает список всех актеров.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actor"
                ],
                "summary": "Возвращает список актеров",
                "responses": {
                    "200": {
                        "description": "Список актеров",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.ActorEntity"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении актеров",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает нового актера на основе переданных данных.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actor"
                ],
                "summary": "Создает актера",
                "parameters": [
                    {
                        "description": "Данные актера",
                        "name": "actor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.ActorEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка при декодировании JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при создании актера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/actor/{id}": {
            "get": {
                "description": "Возвращает информацию об актере по указанному ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actor"
                ],
                "summary": "Возвращает информацию об актере",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID актера",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация об актере",
                        "schema": {
                            "$ref": "#/definitions/entities.ActorEntity"
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении актера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию об актере с указанным ID на основе переданных данных.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Actor"
                ],
                "summary": "Обновляет информацию об актере",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID актера",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Данные актера",
                        "name": "actor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.ActorEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка при декодировании JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при обновлении актера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет актера с указанным ID.",
                "tags": [
                    "Actor"
                ],
                "summary": "Удаляет актера",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID актера",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при удалении актера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/film": {
            "get": {
                "description": "Возвращает список всех фильмов.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Film"
                ],
                "summary": "Возвращает список фильмов",
                "responses": {
                    "200": {
                        "description": "Список фильмов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.FilmEntity"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении фильмов",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает новый фильм на основе переданных данных.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Film"
                ],
                "summary": "Создает фильм.",
                "parameters": [
                    {
                        "description": "Данные фильма",
                        "name": "film",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.FilmEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка при декодировании JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при создании фильма",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/film/{id}": {
            "get": {
                "description": "Возвращает информацию о фильме по указанному ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Film"
                ],
                "summary": "Возвращает информацию о фильме",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID фильма",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Информация о фильме",
                        "schema": {
                            "$ref": "#/definitions/entities.FilmEntity"
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении фильма",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Обновляет информацию о фильме с указанным ID на основе переданных данных.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Film"
                ],
                "summary": "Обновляет информацию о фильме",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID фильма",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Данные фильма",
                        "name": "film",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.FilmEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка при декодировании JSON",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при обновлении фильма",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Удаляет фильм с указанным ID.",
                "tags": [
                    "Film"
                ],
                "summary": "Удаляет фильм",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID фильма",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при удалении фильма",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.ActorEntity": {
            "type": "object",
            "properties": {
                "birthday": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entities.FilmEntity": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.ActorEntity"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "releaseDate": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Filmography web-application",
	Description:      "Simple CRUD application to test my go skills",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
